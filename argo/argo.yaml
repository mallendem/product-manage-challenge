apiVersion: v1
kind: Service
metadata:
  name: product-service
  namespace: adidas
spec:
  ports:
  - port: 80
    targetPort: 8080
    name: http
  selector:
    app: product-service
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: product-service-canary
  namespace: adidas
spec:
  ports:
  - port: 80
    targetPort: 8080
    name: http
  selector:
    app: product-service
  type: ClusterIP
---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: success-rate
  namespace: adidas
spec:
  args:
  - name: service-name
  metrics:
  - name: success-rate
    successCondition: result[0] >= 0.95
    interval: 30s
    failureLimit: 1
    provider:
      prometheus:
        address: http://prometheus.istio-system.svc.cluster.local:9090
        query: |
          sum(irate(
            istio_requests_total{reporter="source",destination_service=~"{{args.service-name}}",response_code!~"5.*"}[1m]
          )) /
          sum(irate(
            istio_requests_total{reporter="source",destination_service=~"{{args.service-name}}"}[1m]
          ))
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: product-service-hpa-rollout
  namespace: adidas
  annotations:
    metric-config.object.istio-requests-total.prometheus/per-replica: "true"
    metric-config.object.istio-requests-total.prometheus/query: (sum(irate(istio_requests_total{destination_workload_namespace="adidas",destination_app="product-service"}[1m])))/(count(container_memory_usage_bytes{pod=~"product-service.*"})/4)
spec:
  maxReplicas: 6
  minReplicas: 2
  scaleTargetRef:
    apiVersion: argoproj.io/v1alpha1
    kind: Rollout
    name: product-service
  #targetCPUUtilizationPercentage: 80
  metrics:
  - type: Object
    object:
      metricName: istio-requests-total
      target:
        apiVersion: v1
        kind: Rollout 
        name: product-service
      targetValue: 200

